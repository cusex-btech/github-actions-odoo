name: Staging Deployment

on:
  push:
    tags:
      - 'v*'

jobs:
  scan-code:
    name: Scan code with SonarQube
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging
          fetch-depth: 0

      - name: Scan code with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: odoo/addons
          args: >
            -Dsonar.projectKey=odoo
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.language=python
            -Dsonar.verbose=true
            -Dsonar.qualitygate.wait=false
            
      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  build-image:
    name: Build Docker image and push to repositories
    runs-on: self-hosted
    needs: scan-code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: Create Image
        run: |
          echo ${{ secrets.HARBOR_PASSWORD }} | docker login  -u ${{ secrets.HARBOR_USERNAME }} --password-stdin
          cd odoo
          docker build -t odoo:${{ steps.get-version.outputs.VERSION }}-rc .
          echo 'Created Image with name:tag = odoo:${{ steps.get-version.outputs.VERSION }}-rc'
      
      - name: get-images-id
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q odoo:${{ steps.get-version.outputs.VERSION }}-rc)
      
      - name: Push Images
        run: |
          # Staging Image
          echo Push image for Staging
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc
          docker push rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc
          # Production Image
          echo Push image for Production
          docker tag rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}
          docker push rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}
      
      - name: Update Staging Manifest Yaml
        run: |
          cd manifests/staging
          yq e -i '.spec.template.spec.containers[0].image="rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc"' odoo.yaml
          cat odoo.yaml
      
      - name: Update Production Manifest Yaml
        run: |
          cd manifests/production
          yq e -i '.spec.template.spec.containers[0].image="rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}"' odoo.yaml
          cat odoo.yaml
      
      - name: Push Change Back to Github Staging Branch
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: manifests
          destination_repo: cusex-btech/github-actions-odoo
          destination_branch: staging
          user_email: majidqoba52@gmail.com
          user_name: rjhaikal
          commit_message: Update k8s manifest image version to ${{ steps.get-version.outputs.VERSION }}

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  scan-image:
    name: Scan Image Vulnerability
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: Scan Staging Odoo image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rjhaikal/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  deploy-staging:
    name: Deploy Staging
    needs: [build-image, scan-image]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
          argocd app create odoo-staging --project default --repo https://github.com/cusex-btech/github-actions-odoo.git --revision staging --path ./manifests/staging --dest-namespace odoo-stg --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync odoo-staging --force
          argocd --grpc-web app wait odoo-staging --timeout 600

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  create-pr-to-prod:
    name: Create Pull Request to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Create pull request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "staging"
          destination_branch: "production"
          pr_title: "Merge for Production branch"
          pr_body: "Merge for Production branch"
          pr_label: "automated-pr,merge-to-prod"
          pr_allow_empty: true 
          github_token: ${{ secrets.API_TOKEN_GITHUB }}

      - name: Telegram Notification
        if: cancelled() == false
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: false
