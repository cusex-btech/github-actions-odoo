name: Staging Deployment

on:
  push:
    tags:
      - 'v*'

jobs:
  scan-code:
    name: Scan code with SonarQube
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging
          fetch-depth: 0

      - name: Scan code with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: odoo/addons
          args: >
            -Dsonar.projectKey=odoo
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.language=python
            -Dsonar.verbose=true
            -Dsonar.qualitygate.wait=false

      # - name: SonarQube Quality Gate check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   # Force to fail step after specific time.
      #   timeout-minutes: 5
      #   env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

      # # Optionally you can use the output from the Quality Gate in another step.
      # # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      # - name: "Example show SonarQube Quality Gate Status value"
      #   run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  build-image:
    name: Build Docker Image & Push Chart to Harbor
    runs-on: self-hosted
    needs: scan-code
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Get Version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: Create Image
        run: |
          echo ${{ secrets.HARBOR_PASSWORD }} | docker login ${{ secrets.HARBOR_URL }} -u ${{ secrets.HARBOR_USERNAME }} --password-stdin
          cd odoo
          docker build -t odoo:${{ steps.get-version.outputs.VERSION }}-rc .
          echo 'Created Image with name:tag = odoo:${{ steps.get-version.outputs.VERSION }}-rc'
      
      - name: get-images-id
        id: image-id
        run: |
          echo ::set-output name=IMAGE_ID::$(docker images -q odoo:${{ steps.get-version.outputs.VERSION }}-rc)
      
      - name: Push Images
        run: |
          # Staging Image
          echo Push image for Staging
          docker tag ${{ steps.image-id.outputs.IMAGE_ID }} cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc
          docker push cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc
          # Production Image
          echo Push image for Production
          docker tag cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}
          docker push cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}

      - name: Update Staging Helm Chart Values
        run: |
          cd helm/odoo
          # Update Helm Chart Version
          yq e -i '.version="${{ steps.get-version.outputs.VERSION }}"' Chart.yaml
          yq e -i '.appVersion="${{ steps.get-version.outputs.VERSION }}"' Chart.yaml
          cat Chart.yaml

          # Update Staging Values
          yq e -i '.container.image="cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc"' values.yaml
          cat values.yaml
          yq e -i '.container.image="cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc"' values-stg.yaml
          cat values-stg.yaml

          # Update Production Values
          yq e -i '.container.image="cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}"' values-prod.yaml
          cat values-prod.yaml

      - name: Update Environment Variable
        run: |
          cd .github/variables
          echo VERSION=${{ steps.get-version.outputs.VERSION }} > version.env

      - name: Push Chart to Harbor
        run: |
          helm repo update
          cd helm
          helm cm-push --username ${{ secrets.HARBOR_USERNAME }} --password ${{ secrets.HARBOR_PASSWORD }} odoo/ cusex

      - name: Push Change Back to Github Staging Branch
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: 'helm','.github'
          destination_repo: cusex-btech/github-actions-odoo
          destination_branch: staging
          user_email: majidqoba52@gmail.com
          user_name: rjhaikal
          commit_message: Update k8s helm image version to ${{ steps.get-version.outputs.VERSION }}

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  scan-image:
    name: Scan Image Vulnerability
    runs-on: self-hosted
    needs: build-image
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      
      - name: Scan Staging Odoo image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cx-harbor.btech.id/cusex/odoo:16-${{ steps.get-version.outputs.VERSION }}-rc'
          format: 'table'
          exit-code: '0'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  deploy-staging:
    name: Deploy Staging
    needs: [build-image, scan-image]
    runs-on: self-hosted
    environment:
      name: Staging
    steps:
      - name: get version
        id: get-version
        run: |
          echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: ArgoCD Deploy to Staging
        run: |
          argocd login --insecure  ${{ secrets.ARGOCD_SERVER }} --username  ${{ secrets.ARGOCD_USER }} --password  ${{ secrets.ARGOCD_PASS}}
          argocd app create odoo-staging --project default --repo https://cx-harbor.btech.id/chartrepo/cusex --helm-chart odoo --revision ${{ steps.get-version.outputs.VERSION }} --values values-stg.yaml --dest-namespace odoo-stg --dest-server https://kubernetes.default.svc --upsert
          argocd --grpc-web app sync odoo-staging --force
          argocd --grpc-web app wait odoo-staging --timeout 600

      - name: Telegram Notification
        if: ${{ failure() }}
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: true

  create-pr-to-prod:
    name: Create Pull Request to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v3
        with:
          ref: staging

      - name: Create pull request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "staging"
          destination_branch: "production"
          pr_title: "Merge for Production branch"
          pr_body: "Merge for Production branch"
          pr_label: "automated-pr,merge-to-prod"
          pr_allow_empty: true 
          github_token: ${{ secrets.API_TOKEN_GITHUB }}

      - name: Telegram Notification
        if: cancelled() == false
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELE_BOT_TOKEN }}
          chatId: ${{ secrets.TELE_CHAT_ID }}
          jobStatus: ${{ job.status }}
          skipSuccess: false
